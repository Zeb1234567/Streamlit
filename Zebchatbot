import streamlit as st
from langchain_core.messages import HumanMessage, AIMessage
from langchain_core.prompts import ChatPromptTemplate
from langchain_core.output_parsers import StrOutputParser
from langchain_openai import ChatOpenAI
from langchain_community.chat_models import ChatOllama

from dotenv import load_dotenv

load_dotenv()

if "chat_history" not in st.session_state:
    st.session_state.chat_history = []

st.set_page_config(page_title="Zeb's Chatbot", page_icon=":ghost:", layout="wide")

st.title('Chatbot :penguin: ')

user_input = st.chat_input('Hello! How can I help you?')

# AI reponse
def get_ai_response(user_input, chat_history):
    template = """
    You are a helpful assistant, answer the following questions considering the history of the conversation.

    chat history: {chat_history}

    user input: {user_input}
    """

    prompt = ChatPromptTemplate.from_template(template)

    if llm_providers == "OpenAI":
        llm = ChatOpenAI()
    else:
        llm = ChatOllama(model = "llama2: 7b-chat")

    chain = prompt | llm | StrOutputParser()

    return chain.stream({
        "chat_history": chat_history,
        "user_input": user_input
    })

# chat history 
for message in st.session_state.chat_history:
    if isinstance(message, HumanMessage):
        with st.chat_message("Human"):
            st.markdown(message.content)
    else:
        with st.chat_message("AI"):
            st.markdown(message.content)

#user input
if user_input is not None and user_input != "":
    st.session_state.chat_history.append(HumanMessage(user_input))

    with st.chat_message("Human"):
        st.markdown(user_input)

    with st.chat_message("AI"):
        # st.markdown("MEn")
        ai_response = st.write_stream(get_ai_response(user_input, st.session_state.chat_history))

    st.session_state.chat_history.append(AIMessage(ai_response))

